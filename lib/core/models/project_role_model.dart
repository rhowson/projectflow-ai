import 'package:json_annotation/json_annotation.dart';

part 'project_role_model.g.dart';

/// Project-specific role model that defines roles within individual projects
/// This is separate from team roles and allows for project-specific assignment
@JsonSerializable()
class ProjectRole {
  /// Unique identifier for the project role
  final String id;
  
  /// Project ID this role belongs to
  final String projectId;
  
  /// Role name/title
  final String name;
  
  /// Role description explaining responsibilities
  final String description;
  
  /// Role color for UI display (hex color)
  final String color;
  
  /// List of specific permissions this role has
  final List<String> permissions;
  
  /// Whether this role can be assigned by project managers
  final bool isAssignable;
  
  /// Whether this role was generated by AI
  final bool isAIGenerated;
  
  /// Priority/level of the role (1 = highest, 10 = lowest)
  final int priority;
  
  /// When the role was created
  final DateTime createdAt;
  
  /// Who created the role (user ID)
  final String createdBy;
  
  /// Skills or expertise areas associated with this role
  final List<String> requiredSkills;
  
  /// Estimated time commitment (hours per week)
  final double? timeCommitment;
  
  const ProjectRole({
    required this.id,
    required this.projectId,
    required this.name,
    required this.description,
    required this.color,
    required this.permissions,
    required this.isAssignable,
    required this.isAIGenerated,
    required this.priority,
    required this.createdAt,
    required this.createdBy,
    required this.requiredSkills,
    this.timeCommitment,
  });

  factory ProjectRole.fromJson(Map<String, dynamic> json) => _$ProjectRoleFromJson(json);
  Map<String, dynamic> toJson() => _$ProjectRoleToJson(this);

  ProjectRole copyWith({
    String? id,
    String? projectId,
    String? name,
    String? description,
    String? color,
    List<String>? permissions,
    bool? isAssignable,
    bool? isAIGenerated,
    int? priority,
    DateTime? createdAt,
    String? createdBy,
    List<String>? requiredSkills,
    double? timeCommitment,
  }) {
    return ProjectRole(
      id: id ?? this.id,
      projectId: projectId ?? this.projectId,
      name: name ?? this.name,
      description: description ?? this.description,
      color: color ?? this.color,
      permissions: permissions ?? this.permissions,
      isAssignable: isAssignable ?? this.isAssignable,
      isAIGenerated: isAIGenerated ?? this.isAIGenerated,
      priority: priority ?? this.priority,
      createdAt: createdAt ?? this.createdAt,
      createdBy: createdBy ?? this.createdBy,
      requiredSkills: requiredSkills ?? this.requiredSkills,
      timeCommitment: timeCommitment ?? this.timeCommitment,
    );
  }
}

/// Assignment of a user to a project role
@JsonSerializable()
class ProjectRoleAssignment {
  /// Unique identifier for the assignment
  final String id;
  
  /// Project role ID
  final String projectRoleId;
  
  /// User ID assigned to this role
  final String userId;
  
  /// Project ID
  final String projectId;
  
  /// When the assignment was made
  final DateTime assignedAt;
  
  /// Who made the assignment
  final String assignedBy;
  
  /// Assignment status
  final AssignmentStatus status;
  
  /// Custom title override for this specific assignment
  final String? customTitle;
  
  /// Assignment notes or comments
  final String? notes;
  
  const ProjectRoleAssignment({
    required this.id,
    required this.projectRoleId,
    required this.userId,
    required this.projectId,
    required this.assignedAt,
    required this.assignedBy,
    required this.status,
    this.customTitle,
    this.notes,
  });

  factory ProjectRoleAssignment.fromJson(Map<String, dynamic> json) => _$ProjectRoleAssignmentFromJson(json);
  Map<String, dynamic> toJson() => _$ProjectRoleAssignmentToJson(this);

  ProjectRoleAssignment copyWith({
    String? id,
    String? projectRoleId,
    String? userId,
    String? projectId,
    DateTime? assignedAt,
    String? assignedBy,
    AssignmentStatus? status,
    String? customTitle,
    String? notes,
  }) {
    return ProjectRoleAssignment(
      id: id ?? this.id,
      projectRoleId: projectRoleId ?? this.projectRoleId,
      userId: userId ?? this.userId,
      projectId: projectId ?? this.projectId,
      assignedAt: assignedAt ?? this.assignedAt,
      assignedBy: assignedBy ?? this.assignedBy,
      status: status ?? this.status,
      customTitle: customTitle ?? this.customTitle,
      notes: notes ?? this.notes,
    );
  }
}

/// AI-generated role suggestion with reasoning
@JsonSerializable()
class AIRoleSuggestion {
  /// Suggested role name
  final String name;
  
  /// Role description
  final String description;
  
  /// Required skills
  final List<String> requiredSkills;
  
  /// AI reasoning for this role
  final String reasoning;
  
  /// Suggested permissions
  final List<String> permissions;
  
  /// Suggested color (hex)
  final String suggestedColor;
  
  /// Priority level
  final int priority;
  
  /// Time commitment estimate
  final double? timeCommitment;
  
  const AIRoleSuggestion({
    required this.name,
    required this.description,
    required this.requiredSkills,
    required this.reasoning,
    required this.permissions,
    required this.suggestedColor,
    required this.priority,
    this.timeCommitment,
  });

  factory AIRoleSuggestion.fromJson(Map<String, dynamic> json) => _$AIRoleSuggestionFromJson(json);
  Map<String, dynamic> toJson() => _$AIRoleSuggestionToJson(this);
}

/// Status of role assignment
enum AssignmentStatus {
  @JsonValue('active')
  active,
  
  @JsonValue('pending')
  pending,
  
  @JsonValue('inactive')
  inactive,
  
  @JsonValue('completed')
  completed,
}

/// Extension for AssignmentStatus display names
extension AssignmentStatusExtension on AssignmentStatus {
  String get displayName {
    switch (this) {
      case AssignmentStatus.active:
        return 'Active';
      case AssignmentStatus.pending:
        return 'Pending';
      case AssignmentStatus.inactive:
        return 'Inactive';
      case AssignmentStatus.completed:
        return 'Completed';
    }
  }
  
  String get color {
    switch (this) {
      case AssignmentStatus.active:
        return '#10B981'; // Green
      case AssignmentStatus.pending:
        return '#F59E0B'; // Yellow
      case AssignmentStatus.inactive:
        return '#6B7280'; // Gray
      case AssignmentStatus.completed:
        return '#3B82F6'; // Blue
    }
  }
}